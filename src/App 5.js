/* eslint-disable */

import logo from './logo.svg';
import './App.css';
import { useState } from 'react';

// (4) 글제목 변경 이벤트 버튼 만들기

function App() {

  let post = '강남 우동 맛집';
  // let [글제목, b] = useState(['남자 코트 추천', '강남 우동 맛집', '파이썬 독학']);
  // 지난 시간 숙제
  let [글제목, 글제목변경] = useState(['남자 코트 추천', '강남 우동 맛집', '파이썬 독학']);
  let [따봉, 따봉변경] = useState(0);

  // (참고)
  function 제목바꾸기() {
    let copy = [...글제목];
    copy[0] = '여자 코트 추천';
    글제목변경(copy);
  }

  // 다음 시간 숙제
  function 순서바꾸기() {
    let copy = [...글제목];
    copy.sort();
    글제목변경(copy);
  }

  return (
    <div className="App">
      <div className='black-nav'>
        <h4>ReactBlog</h4>
      </div>

      {/* 지난 시간 숙제 : 버튼을 누르면 첫 글이 '남자 코트 추천' 에서 '여자 코트 추천'으로 바뀌는 기능 만들기 */}
      {/* 아래와 같이 할 경우(자의적으로 코딩할 경우) 컴퓨터가 제대로 읽어내지 못하고 이상하게 코딩됨 */}
      {/* <button onClick={() => {
        글제목변경('여자 코트 추천');
      }}>글 수정</button> */}
      {/* 그러므로 아래와 같이 코딩해야 함 */}
      {/* <button onClick={() => {
        글제목변경(['여자 코트 추천', '강남 우동 맛집', '파이썬 독학']);
      }}>글 수정</button> */}
      {/* 하지만 위와 같이 코딩할 경우, 확장성이 떨어진다. 지금 state 안에 데이터가 3개밖에 없어서 망정이지 데이터가 100개면 언제 다 적어.. */}
      {/* 일부분만 바꿔서 state 변경함수에 넣는 것으로 해서 개발자답게 바꾸자! */}
      {/* <button onClick={() => {
        // 글제목[0] = '여자 코트 추천'; : array 데이터 수정 문법
        글제목[0] = '여자 코트 추천';
        글제목변경(글제목);
      }}>글 수정</button> */}


      {/* 근데 이렇게 코드 짜는 것 보다 더 좋은 관습을 알려드릴게요 */}
      {/* (참고) array 와 object 는 다룰 때는 원본을 수정하지 말고 보존하는 코딩이 좋다. */}
      {/* 영구적으로 원본 데이터를 변경하면 나중에 되돌리기 힘들다. 그러므로 복사본을 하나 만들어 둔다. */}
      {/* 변수에다가 원본 카피! : let copy = 글제목; */}
      {/* 그 다음에 이 카피본을 수정을 하는 겁니다. : copy[0] = '여자 코트 추천'; */}
      {/* <button onClick={() => {
        let copy = 글제목;
        copy[0] = '여자 코트 추천';
        글제목변경(copy);
      }}>글 수정</button> */}
      {/* 어 이거 안되는데여? 하실 텐데 제가 사기친 게 아니라 복사본 문법이 따로 있다 : [...글제목] */}
      {/* <button onClick={() => {
        let copy = [...글제목];
        copy[0] = '여자 코트 추천';
        글제목변경(copy);
      }}>글 수정</button> */}


      {/* 이 이유가 궁금하다면 잠시 동작 원리를 설명하겠습니다. 2가지 포인트 이해가 필요합니다 */}
      {/* 1) state 변경함수의 특징 */}
      {/* state 변경함수는 개발자가 () 안에 집어넣은 걸로 기존 state 를 갈아치워준다고 했어요.
          근데 갈아치워주기 전에 조건을 하나 딱 따져본다.
          기존 state 랑 신규 state 랑 등호로 비교해서 '같다' 그러면 state 를 변경해 주지 않는다.
          이런 식으로 검사를 한번 한다. 왜 그렇냐면 에너지(자원) 절약이라고 생각하면 된다. 같은데 굳이 변경할 필요가 없죠. */}
      {/* 2) array/object 데이터 특징(자바스크립트에서는 동작방식이 특이하다) */}
      {/* 제가 한번 array 를 한번 만들어 볼게요 */}
      {/* <button onClick={() => {

        // arr 라는 변수를 만들고 array 데이터를 저장해 놨다.
        // 근데 자바스크립트에서는 1, 2, 3 이라는 array 를 변수 arr 에 집어넣어주세요 의 의미가 아니라,
        // 1, 2, 3이라는 array 를 미지의 공간에 저장을 해 놓고
        // 그 다음에 1, 2, 3이라는 이 array 가 어디에 있는지 가르키는 화살표만 변수에 저장해 주세요 라는 뜻 (특이함)
        // let arr 가 미지의 공간 RAM 에 있는 1, 2, 3을 가리키고 있는 것(let arr -> RAM([1,2,3]) : [1,2,3] array 가 여기에 들어있어!)
        let arr = [1,2,3];

        let copy = [...글제목];
        copy[0] = '여자 코트 추천';
        글제목변경(copy);
      }}>글 수정</button> */}
      {/* 좀 더 이해하기 쉽게 맨처음에 짰던 코드로 변경 */}
      {/* <button onClick={() => {

      let arr = [1,2,3];

      // 기존에 있던 state를 아래와 같이 변경하고 그렇게 변경해 주세요라고 코들르 짰지만 반영(실행)이 안된다.
      // 글제목[0] = '여자 코트 추천' 가 array 데이터를 수정하는 문법은 맞음
      // 자 이러면 이제 글제목이라는 이 화살표를 타고 가서 0번째 데이터를 '여자 코트 추천'이라고 바꿔주긴 합니다.
      // 하지만 글 제목에 있던 화살표는 절대 변경되지 않음
      // 글제목[0] = '여자 코트 추천' 는 array 안에 있는 데이터를 변경하라는 뜻이지 글제목이라는 변수를 변경하지 않았다.
      // 그래가지고 여기다가 이제 집어넣으면 state 변경이 안되는 거에요.
      // 얘는 신규 state 랑 기존 state 랑 똑같다고 생각을 합니다.
      // 왜냐하면 기존 state 도 글제목, 신규 state 도 글제목 이죠 그죠?
      // 그리고 이 두 개 변수에 들어있는 화살표도 변경된 적이 없죠? 기존과 신규가 다른 점이 없다 라고 생각해 state 변경을 해주지 않는다.
      // (글제목에 저장되어있던 화살표는 바뀐 적이 없음!)
      글제목[0] = '여자 코트 추천';
      글제목변경(글제목);
      }}>글 수정</button> */}


      {/* 이게 이해가 안가면 이제 아래와 같이 코드를 이렇게 짜면 더 이해하기 쉬울 거에요.
          아까 보시면 제가 변수를 하나 카피본을 만들어서 코드를 짰다. */}
      {/* 기존에 있던 array 데이터를 복사하고 복사한 데이터를 수정해서 state변경함수에 집어넣었다 */}
      {/* 복사를 했기 때문에 기존 state 와 신규 state 가 약간 달라보인다. 그러면 데이터 변경을 해줘야 하는데 안된다. */}
      {/* <button onClick={() => {
        let copy = 글제목;
        copy[0] = '여자 코트 추천';
        글제목변경(copy);
      }}>글 수정</button> */}
      {/* 그 이유는요. 지금 글제목이라는 array 를 복사를 했어요. 그러면 여러분들 글제목에 있던 것들이 copy 에 그대로 박히게 되는데
          글제목에 저장해 있던 것은 array 데이터가 아니라 이 데이터가 어딨는지 가르키는 화살표입니다. 화살표만 저장이 된다고 했어요! */}
      {/* 그래가지고 얘도 똑같은 화살표를 복사해 온 것이라(let 글제목에 있던 화살표가 복사됨)
          이 copy 수정해도 copy 안에 들어있던 화살표는 전혀 바뀌지 않습니다! */}
      {/* (중요) 변수1과 변수2 의 화살표가 같으면 변수1 == 변수 2 비교해도 true 나옴 */}
      {/* <button onClick={() => {
        let copy = 글제목;
        copy[0] = '여자 코트 추천';
        console.log(copy == 글제목); // true 나옴 - 등호 비교했더니 화살표가 똑같아서 state 변경이 안된다.
        글제목변경(copy);
      }}>글 수정</button> */}
      {/* 이런 이상한 현상에 대해서 더 공부해 보고 싶다면 reference date type 를 공부하세요. array, object는 reference date type */}


      {/* 그래서 [...변수명] 을 이용해서 코드를 짜는 이유는 '화살표를 새로 바꿔주세요'라는 뜻이기 때문. */}
      {/* '...' 점 3개 문법은 뭐냐면 '괄호를 벗겨주세요' + 그 다음에 '[] 를 다시 씌워주세요!' 라는 문법 */}
      {/* 그러면 완전히 독립적인 array 사본 데이터가 되는 것이고 화살표도 완전히 달라진다. : let copy = [...글제목]; */}
      {/* 새로운 화살표를 copy에다가 저장했으니까 */}
      {/* state 변경함수인 '글제목변경'의 () 안에 copy 를 집어 넣으면 새로운 state 라고 생각한다. : 글제목변경(copy); */}
      {/* 이제 state 를 변경해 준다! */}
      {/* '...'를 쓰게되면 -> 값공유x, 서로 독립적인 값을 가지는 복사이므로 하드코딩할 필요 없음! */}
      <button onClick={() => {
        let copy = [...글제목];
        copy[0] = '여자 코트 추천';
        글제목변경(copy);
      }}>글 수정</button>
      {/* (참고) 또는 아래와 같이 버튼 만들 수 있다 */}
      <button onClick={() => {제목바꾸기()}}>글 수정</button>


      {/* 만약에 나는 이런 거 이해하기싫고 생각하기 싫고 그냥 따라적고 싶어요 그런 분들은 이런 식으로 생각하시면 되겠습니다. */}
      {/* 빡대가리식 정리 : 자 기존 state 가 (문자나 숫자 이런 건 상관없는데) array 나 object 데이터다
          그러면 이제 state 를 수정할 때 항상 독립적인 카피본을 만들어서 수정을 해서 state 변경 함수 안에 집어넣으면 된다.
          array 나 object 데이터는 별개의 복사본(전문용어 : shallow copy 또는 deep copy) 만들어서 수정하면 됩니다용 */}


      {/* 숙제 : 버튼을 하나 더 만들어서 해당 버튼을 누르면 글제목 가나다순 정렬 기능 만들기 */}
      <button onClick={() => {
        let copy = [...글제목];
        copy.sort();
        글제목변경(copy);
      }}>가나다순 정렬</button>
      <button onClick={() => {순서바꾸기()}}>가나다순 정렬</button>

      <div className="list">
        <h4>{글제목[0]} <span onClick={() => {따봉변경(따봉+1)}}>👍</span> {따봉} </h4>
        <p>2월 17일 발행</p>
      </div>
      <div className="list">
        <h4>{글제목[1]}</h4>
        <p>2월 17일 발행</p>
      </div>
      <div className="list">
        <h4>{글제목[2]}</h4>
        <p>2월 17일 발행</p>
      </div>
    </div>
  );
}

export default App;
